---
# Run this locally with act - https://github.com/nektos/act
# act --container-architecture linux/amd64 -j backend_test
name: CI - Primary Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: ["**"]
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
    actions: write
    checks: write
    contents: read
    deployments: write
    id-token: write
    packages: write
    pages: read
    statuses: write
    pull-requests: write
    # issues: write
    # discussions: read|write|none
    # repository-projects: read|write|none
    # security-events: read|write|none

# env: {}

jobs:
    pre-commit:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v4
            - uses: ./.github/actions/setup-js-env
            - uses: pre-commit/action@v3.0.1
    repo-meta:
        runs-on: ubuntu-latest
        timeout-minutes: 3
        outputs:
            # This is used to determine if this is a PR build or a main build
            merge-type: ${{ steps.determine-ci-type.outputs.MERGE_TYPE }}
        env:
            GITHUB_VAR_JSON: ${{ toJSON(github) }}
            GITHUB_INPUTS_JSON: ${{ toJSON(inputs) }}
        steps:
            - name: Debug Workflow Context
              shell: bash
              # Useful for analyzing the workflow
              # https://docs.github.com/en/actions/learn-github-actions/variables
              # https://docs.github.com/en/actions/learn-github-actions/co
              run: |
                  echo "Inputs JSON:"
                  printf '\n\n'
                  echo "${GITHUB_INPUTS_JSON}"
                  printf '\n\n'
                  echo "Github JSON:"
                  printf '\n\n'
                  echo "${GITHUB_VAR_JSON}"
                  printf '\n\n'
            - name: Debug Environment Variables
              shell: bash
              run: |
                  printenv
            - name: Determine CI Type
              id: determine-ci-type
              run: |
                  set -x
                  MERGE_TYPE=${{ github.ref_name == github.event.repository.default_branch && 'main' || 'pr' }}
                  echo "MERGE_TYPE=${MERGE_TYPE}" | tee -a $GITHUB_OUTPUT
            # This needs to run -- even though we run it again to get greater history below -- since
            # workflows that call composite actions or other workflows need the local source files
            # to reference them
            - uses: actions/checkout@v4
              with:
                  # Set this to 2 so that on a main build we can diff against the prior commit
                  fetch-depth: 2

    # Use a dynamically created matrix
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#expanding-or-adding-matrix-configurations
    # https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
    build-and-test-packages:
        timeout-minutes: 5
        runs-on: ubuntu-latest
        needs:
            - repo-meta
        steps:
            - name: Debug Workflow Context
              shell: bash
              # Useful for analyzing the workflow
              # https://docs.github.com/en/actions/learn-github-actions/variables
              # https://docs.github.com/en/actions/learn-github-actions/co
              run: |
                  echo "Inputs JSON:"
                  printf '\n\n'
                  echo "${GITHUB_INPUTS_JSON}"
                  printf '\n\n'
                  echo "Github JSON:"
                  printf '\n\n'
                  echo "${GITHUB_VAR_JSON}"
                  printf '\n\n'
            - name: Debug Environment Variables
              shell: bash
              run: |
                  printenv
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 1
            - name: Setup JS Environment
              uses: ./.github/actions/setup-js-env
            - name: Precompile
              run: |
                  pnpm run precompile
            - name: Compile
              run: |
                  pnpm run compile
            - name: Build
              run: |
                  pnpm run build
            - name: Pre-Test - Docker Dependencies
              run: |
                  docker compose pull
                  make docker-dependencies
                  if ./scripts/wait-for-it.sh -t 15 localhost:5432; then
                    echo "Dependencies are ready"
                    docker ps -a
                    docker compose logs
                  else
                    echo "Database not online on localhost:5432"
                    docker ps -a
                    docker compose logs
                    exit 101
                  fi
            #   https://github.com/marketplace/actions/vitest-coverage-report
            - name: Test
              run: |
                  pnpm vitest --coverage.enabled true
                  pnpm run test
            # https://github.com/mikepenz/action-junit-report
            - name: Publish Test Report
              uses: mikepenz/action-junit-report@v4
              # always run even if the previous step fails
              if: success() || failure()
              with:
                  report_paths: "./junit-report.xml"
                  # Since not all packages have tests, this is not always true at the moment
                  require_passed_tests: true
                  job_summary: true
                  detailed_summary: true
            - name: "Report Coverage"
              if: always()
              uses: davelosert/vitest-coverage-report-action@v2
            #   with:
            #   json-summary-compare-path: coverage/coverage-summary.json
            # - name: Lint
            #   run: |
            #       pnpm run lint
            - name: Clean Up
              if: always()
              run: |
                  docker compose down --remove-orphans
